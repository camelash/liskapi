## openAccount

Create a Lisk account.

+ Parameters

    + secret: "some secret sentence" (required, string)

+ Usage

        lisk.openAccount ()
            .data ( { secret: 'some secret' } )
            .call ()
            .then ((res) => {
                console.log (`Post for opening an account\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error opening an account\n', err);
            });

+ Response 200 (application/json)

        {
          "success": true,
          "account": {
            "address": "Address of account. String",
            "unconfirmedBalance": "Unconfirmed balance of account. String",
            "balance": "Balance of account. String",
            "publicKey": "Public key of account. Hex",
            "unconfirmedSignature": "If account enabled second signature, but it's still not confirmed. Integer",
            "secondSignature": "If account enabled second signature. Integer",
            "secondPublicKey": "Second public key of account. Hex",
            "multisignatures": "Multisignatures. Array"
            "u_multisignatures": "uMultisignatures. Array"
          }
        }

## getBalance

Request the balance of an account by address.

+ Parameters

    + address: "some address" (string)

+ Usage

        lisk.getBalance ( { address: 'address' } )
            .call ()
            .then ((res) => {
                console.log (`Get balance\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error in getting balance\n', err);
            });

+ Response 200 (application/json)

        {
          "success": true,
          "balance": "Balance of account",
          "unconfirmedBalance": "Unconfirmed balance of account"
        }

## getPublicKey

Get the public key of an account.

+ Parameters

    + address: "some address" (string)

+ Usage

        lisk.getPublicKey ( { address: 'address' } )
            .call ()
            .then ((res) => {
                console.log (`Get public key\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error in getting public key\n', err);
            });

+ Response 200 (application/json)

        {
          "success": true,
          "publicKey": "Public key of account. Hex"
        }

## generatePublicKey

Returns the public key of the provided secret key.

+ Parameters

    + secret: "some secret sentence" (required, string)

+ Usage

        lisk.generatePublicKey ()
            .data ( { secret: 'some secret' } )
            .call ()
            .then ((res) => {
                console.log (`Post for generating a publicKey\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error generating a publicKey\n', err);
            });

+ Response 200 (application/json)

        {
          "success": true,
          "publicKey": "Public key of account. Hex"
        }

## getAccount

Returns account information of an address.

+ Parameters

    + address: "some address" (string)

+ Usage

        lisk.getAccount ( { address: 'some address' } )
            .call ()
            .then ((res) => {
                console.log (`Getting an account\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error getting an account\n', err);
            });

+ Response 200 (application/json)

        {
          "success": true,
          "account": {
            "address": "Address of account. String",
            "unconfirmedBalance": "Unconfirmed balance of account. Integer",
            "balance": "Balance of account. Integer",
            "publicKey": "Public key of account. Hex",
            "unconfirmedSignature": "If account enabled second signature, but it's still not confirmed. Boolean: true or false",
            "secondSignature": "If account enabled second signature. Boolean: true or false",
            "multisignatures": "Multisignatures. Array"
            "u_multisignatures": "uMultisignatures. Array"
          }
        }

## getDelegatesByAddress

Returns delegate accounts by address.

+ Parameters

    + address: "some address" (string)

+ Usage

        lisk.getDelegatesByAddress ( { address: 'some address' } )
            .call ()
            .then ((res) => {
                console.log (`Get delegates by address\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error in getting delegates by address\n', err);
            });

+ Response 200 (application/json)

        {
            "success": true,
            "delegates": [
              "array of delegates object. (see below the delegate object response)"
            ]
        }

## voteDelegates

Add or remove votes to a delegate by address.

+ Parameters

    + secret: "some secret" (required, string)

    + publicKey "address public key" (required, string)

    + secondSecret "second address secret" (string)

    + "delegates" : "Array of string in the following format: ["+DelegatePublicKey"] OR ["-DelegatePublicKey"]. Use + to UPvote, - to DOWNvote" (required, array)

+ Usage

        lisk.voteDelegates ()
            .data ( { secret: 'some secret',
                        publicKey: 'some public key',
                        delegates: ["+AddVoteToSomePublicKey", "-AddVoteToSomePublicKey"]
            } )
            .call ()
            .then ((res) => {
                console.log (`Put for voting delegates\n ${JSON.stringify (res)}`);
            })
            .catch ((err) => {
                console.log ('Got an error voting delegates\n', err);
            });

+ Response 200 (application/json)

        {  
           "success": true,
           "transaction": {  
              "type": "Type of transaction. Integer",
              "amount": "Amount. Integer",
              "senderPublicKey": "Sender public key. String",
              "requesterPublicKey": "Requester public key. String",
              "timestamp": "Timestamp. Integer",
              "asset":{  
                 "votes":[  
                    "+VotedPublickKey",
                    "-RemovedVotePublicKey"
                 ]
              },
              "recipientId": "Recipient address. String",
              "signature": "Signature. String",
              "signSignature": "Sign signature. String",
              "id": "Tx ID. String",
              "fee": "Fee. Integer",
              "senderId": "Sender address. String",
              "relays": "Propagation. Integer",
              "receivedAt": "Time. String"
           }
        }